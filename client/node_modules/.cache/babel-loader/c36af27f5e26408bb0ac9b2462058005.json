{"remainingRequest":"/Users/linqingguang/Documents/文稿/项目/微信实时聊天/client/node_modules/babel-loader/lib/index.js!/Users/linqingguang/Documents/文稿/项目/微信实时聊天/client/src/http.js","dependencies":[{"path":"/Users/linqingguang/Documents/文稿/项目/微信实时聊天/client/src/http.js","mtime":1559402606559},{"path":"/Users/linqingguang/Documents/文稿/项目/微信实时聊天/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/linqingguang/Documents/文稿/项目/微信实时聊天/client/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport router from \"./router\";\nimport Qs from 'qs'; // 请求拦截  设置统一header\n\naxios.interceptors.request.use(function (config) {\n  if (localStorage.wxToken) {\n    config.headers.Authorization = localStorage.wxToken;\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); // 响应拦截\n\naxios.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  //全局超时配置方案\n  var originalRequest = error.config;\n\n  if (error.code == 'ECONNABORTED' && error.message.indexOf('timeout') != -1 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    return axios.request(originalRequest);\n  } // 错误提醒\n\n\n  var status = error.response.status; //status==401 token过期\n\n  if (status == 401) {\n    alert('token值无效，请重新登录'); // 清除token\n\n    localStorage.removeItem('wxToken'); // 页面跳转\n\n    router.push('/login');\n  } else {\n    alert(error.response.data);\n  }\n\n  return Promise.reject(error);\n});\nexport default axios;",{"version":3,"sources":["/Users/linqingguang/Documents/文稿/项目/微信实时聊天/client/src/http.js"],"names":["axios","router","Qs","interceptors","request","use","config","localStorage","wxToken","headers","Authorization","error","Promise","reject","response","originalRequest","code","message","indexOf","_retry","status","alert","removeItem","push","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP;AACA,OAAOC,EAAP,MAAe,IAAf,C,CAGA;;AACAF,KAAK,CAACG,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACE,UAAAC,MAAM,EAAI;AAER,MAAIC,YAAY,CAACC,OAAjB,EAA0B;AACxBF,IAAAA,MAAM,CAACG,OAAP,CAAeC,aAAf,GAA+BH,YAAY,CAACC,OAA5C;AACD;;AAED,SAAOF,MAAP;AACD,CARH,EASE,UAAAK,KAAK,EAAI;AACP,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAXH,E,CAcA;;AACAX,KAAK,CAACG,YAAN,CAAmBW,QAAnB,CAA4BT,GAA5B,CACE,UAAAS,QAAQ,EAAI;AACV,SAAOA,QAAP;AACD,CAHH,EAIE,UAAAH,KAAK,EAAI;AACP;AACA,MAAII,eAAe,GAAGJ,KAAK,CAACL,MAA5B;;AACA,MAAIK,KAAK,CAACK,IAAN,IAAc,cAAd,IAAgCL,KAAK,CAACM,OAAN,CAAcC,OAAd,CAAsB,SAAtB,KAAoC,CAAC,CAArE,IAA0E,CAACH,eAAe,CAACI,MAA/F,EAAuG;AACrGJ,IAAAA,eAAe,CAACI,MAAhB,GAAyB,IAAzB;AACA,WAAOnB,KAAK,CAACI,OAAN,CAAcW,eAAd,CAAP;AACD,GANM,CAOP;;;AAPO,MASLK,MATK,GAUHT,KAAK,CAACG,QAVH,CASLM,MATK,EAWP;;AACA,MAAIA,MAAM,IAAI,GAAd,EAAmB;AACjBC,IAAAA,KAAK,CAAC,gBAAD,CAAL,CADiB,CAEjB;;AACAd,IAAAA,YAAY,CAACe,UAAb,CAAwB,SAAxB,EAHiB,CAOjB;;AACArB,IAAAA,MAAM,CAACsB,IAAP,CAAY,QAAZ;AACD,GATD,MASO;AACLF,IAAAA,KAAK,CAACV,KAAK,CAACG,QAAN,CAAeU,IAAhB,CAAL;AACD;;AAED,SAAOZ,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CA9BH;AAiCA,eAAeX,KAAf","sourcesContent":["import axios from 'axios';\nimport router from './router';\nimport Qs from 'qs'\n\n\n// 请求拦截  设置统一header\naxios.interceptors.request.use(\n  config => {\n\n    if (localStorage.wxToken) {\n      config.headers.Authorization = localStorage.wxToken;\n    }\n\n    return config;\n  },\n  error => {\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截\naxios.interceptors.response.use(\n  response => {\n    return response;\n  },\n  error => {\n    //全局超时配置方案\n    var originalRequest = error.config;\n    if (error.code == 'ECONNABORTED' && error.message.indexOf('timeout') != -1 && !originalRequest._retry) {\n      originalRequest._retry = true\n      return axios.request(originalRequest);\n    }\n    // 错误提醒\n    const {\n      status\n    } = error.response;\n    //status==401 token过期\n    if (status == 401) {\n      alert('token值无效，请重新登录');\n      // 清除token\n      localStorage.removeItem('wxToken');\n\n\n\n      // 页面跳转\n      router.push('/login');\n    } else {\n      alert(error.response.data)\n    }\n\n    return Promise.reject(error);\n  }\n);\n\nexport default axios;"]}]}