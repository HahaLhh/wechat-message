{"remainingRequest":"/Users/linqingguang/Documents/文稿/项目/微信实时聊天/client/node_modules/babel-loader/lib/index.js!/Users/linqingguang/Documents/文稿/项目/微信实时聊天/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/linqingguang/Documents/文稿/项目/微信实时聊天/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/linqingguang/Documents/文稿/项目/微信实时聊天/client/src/views/ChatView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/linqingguang/Documents/文稿/项目/微信实时聊天/client/src/views/ChatView.vue","mtime":1560165860088},{"path":"/Users/linqingguang/Documents/文稿/项目/微信实时聊天/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/linqingguang/Documents/文稿/项目/微信实时聊天/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/linqingguang/Documents/文稿/项目/微信实时聊天/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/linqingguang/Documents/文稿/项目/微信实时聊天/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Header from \"../components/Header\";\nimport WSocket from \"../socket.js\";\nexport default {\n  data: function data() {\n    return {\n      targetUser: null,\n      msgValue: \"\",\n      messageList: []\n    };\n  },\n  components: {\n    Header: Header\n  },\n  beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n    next(function (vm) {\n      vm.targetUser = to.params.user;\n      vm.getMessage();\n    });\n  },\n  computed: {\n    user: function user() {\n      return this.$store.getters.user;\n    }\n  },\n  // 服务端推送消息给客户端\n  mounted: function mounted() {\n    var _this = this;\n\n    //WSocket.init(用户，信息，错误)\n    WSocket.init( //用户\n    {\n      user: this.user\n    }, //信息\n    function (message) {\n      // 收到消息后,将消息存储到数据中\n      _this.messageList.push({\n        msg: message.msg,\n        source: \"other\"\n      }); // 保存消息\n\n\n      _this.saveMsg();\n    }, //错误 \n    function (error) {\n      console.log(error);\n    });\n  },\n  methods: {\n    sendMessage: function sendMessage() {\n      // console.log(this.msgValue);\n      // 需要发送的消息对象\n      var msgObj = {\n        target: this.targetUser._id,\n        current: this.user.id,\n        msg: this.msgValue\n      };\n      WSocket.send(msgObj); // 本地客户端显示\n\n      this.messageList.push({\n        msg: this.msgValue,\n        source: \"self\"\n      }); // 保存消息\n\n      this.saveMsg(); // 清空input\n\n      this.msgValue = \"\";\n    },\n    saveMsg: function saveMsg() {\n      var _this2 = this;\n\n      // 保存消息\n      var message = {\n        target: {\n          avatar: this.targetUser.avatar,\n          name: this.targetUser.name,\n          _id: this.targetUser._id\n        },\n        count: 0,\n        message: this.messageList,\n        user_id: this.user.id\n      };\n      this.$axios.post(\"/api/profile/addmsg\", message).then(function (res) {\n        return _this2.msgValue = \"\";\n      });\n    },\n    getMessage: function getMessage() {\n      var _this3 = this;\n\n      this.$axios(\"/api/profile/msg/\".concat(this.user.id)).then(function (res) {\n        // console.log(res.data);\n        // 过滤与当前目标对象的聊天数据\n        var result = res.data.filter(function (data) {\n          // console.log(data.target._id);\n          // console.log(this.targetUser._id);\n          return data.target._id == _this3.targetUser._id;\n        });\n\n        if (result.length > 0) {\n          _this3.messageList = result[0].message;\n        }\n      });\n    }\n  }\n};",{"version":3,"sources":["ChatView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"chat\">\n    <Header v-if=\"targetUser\" :is-left=\"true\" :title=\"targetUser.name\" btn_icon=\"ellipsis-h\"/>\n\n    <div class=\"container\">\n      <!-- 聊天内容 -->\n      <div\n        class=\"content_wrap\"\n        :v-if=\"targetUser && user\"\n        v-for=\"(item,index) in messageList\"\n        :key=\"index\"\n      >\n        <!-- 别人的内容 -->\n        <div class=\"left_msg\" v-if=\"item.source == 'other'\">\n          <img :src=\"targetUser.avatar\" alt>\n          <span>{{item.msg}}</span>\n        </div>\n        <!-- 我的内容 -->\n        <div class=\"right_msg\" v-if=\"item.source=='self'\">\n          <span>{{item.msg}}</span>\n          <img :src=\"user.avatar\" alt>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"footer_wrap\">\n      <input type=\"text\" v-model=\"msgValue\">\n      <button :disabled=\"msgValue == ''\" @click=\"sendMessage\">发送</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Header from \"../components/Header\";\nimport WSocket from \"../socket.js\";\nexport default {\n  data() {\n    return {\n      targetUser: null,\n      msgValue: \"\",\n      messageList: []\n    };\n  },\n  components: {\n    Header\n  },\n  beforeRouteEnter(to, from, next) {\n    next(vm => {\n      vm.targetUser = to.params.user;\n      vm.getMessage();\n    });\n  },\n  computed: {\n    user() {\n      return this.$store.getters.user;\n    }\n  },\n  // 服务端推送消息给客户端\n  mounted() {\n    //WSocket.init(用户，信息，错误)\n    WSocket.init(\n      //用户\n      { user: this.user },\n      //信息\n      message => {\n        // 收到消息后,将消息存储到数据中\n        this.messageList.push({\n          msg: message.msg,\n          source: \"other\"\n        });\n        // 保存消息\n        this.saveMsg();\n      },\n      //错误 \n      error => {\n        console.log(error);\n      }\n    );\n  },\n  methods: {\n    sendMessage() {\n      // console.log(this.msgValue);\n      // 需要发送的消息对象\n      const msgObj = {\n        target: this.targetUser._id,\n        current: this.user.id,\n        msg: this.msgValue\n      };\n\n      WSocket.send(msgObj);\n\n      // 本地客户端显示\n      this.messageList.push({\n        msg: this.msgValue,\n        source: \"self\"\n      });\n\n      // 保存消息\n      this.saveMsg();\n\n      // 清空input\n      this.msgValue = \"\";\n    },\n    saveMsg() {\n      // 保存消息\n      let message = {\n        target: {\n          avatar: this.targetUser.avatar,\n          name: this.targetUser.name,\n          _id: this.targetUser._id\n        },\n        count: 0,\n        message: this.messageList,\n        user_id: this.user.id\n      };\n      this.$axios\n        .post(\"/api/profile/addmsg\", message)\n        .then(res => (this.msgValue = \"\"));\n    },\n    getMessage() {\n      this.$axios(`/api/profile/msg/${this.user.id}`).then(res => {\n        // console.log(res.data);\n        // 过滤与当前目标对象的聊天数据\n        let result = res.data.filter(data => {\n          // console.log(data.target._id);\n          // console.log(this.targetUser._id);\n          return data.target._id == this.targetUser._id;\n        });\n\n        if (result.length > 0) {\n          this.messageList = result[0].message;\n        }\n      });\n    }\n  }\n};\n</script>\n<style scoped>\n.chat {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n.container {\n  width: 100%;\n  height: calc(100% - 100px);\n  box-sizing: border-box;\n  background-color: #f1f1f1;\n  margin-top: 50px;\n  padding: 8px;\n  overflow-y: scroll;\n}\n.footer_wrap {\n  width: 100%;\n  height: 50px;\n  box-sizing: border-box;\n  border-top: 1px solid #d9d9d9;\n  position: absolute;\n  bottom: 0;\n  padding: 8px;\n  background-color: #fafafa;\n}\n.footer_wrap input {\n  width: 70%;\n  height: 30px;\n  outline: none;\n  border: 1px solid #d9d9d9;\n  border-radius: 4px;\n}\n.footer_wrap button {\n  width: 20%;\n  height: 34px;\n  border: 1px solid #d9d9d9;\n  border-radius: 4px;\n  margin-left: 8px;\n  outline: none;\n  background-color: #f1f1f1;\n}\n.footer_wrap button[disabled] {\n  background-color: #d9d9d9;\n  cursor: not-allowed;\n  pointer-events: none;\n}\n\n.left_msg {\n  justify-content: flex-start;\n}\n.right_msg {\n  justify-content: flex-end;\n}\n.left_msg,\n.right_msg {\n  width: 100%;\n  display: flex;\n  margin: 5px 0;\n}\n.content_wrap img {\n  width: 3rem;\n  height: 3rem;\n}\n.content_wrap span {\n  display: inline-block;\n  max-width: 65%;\n  border: 1px solid #d9d9d9;\n  border-radius: 4px;\n  margin: 0 5px;\n  padding: 8px;\n  box-sizing: border-box;\n  word-break: break-all;\n}\n.left_msg span {\n  background-color: #fff;\n}\n.right_msg span {\n  background-color: #0fce0d;\n}\n</style>\n"],"sourceRoot":"src/views"}]}